depwriter:
  # what to call the development-mode bootstrap file.
  bootstrap: bootstrap.js
  # Dependencies which are CDN hosted by provided name and URL adress.
  # NOTE: place them in the order you would like them written
  cdn_hosted:
    jQuery: 'http://code.jquery.com/jquery-1.6.1.min.js'
  # Tell depwriter to either prepare the project for production or return it
  # to a development state. Choices are 'production', 'development'.
  environment: production
  # Directory paths (relative to root) to exclude from searching for deps.
  # This is particularly useful for testing suites as when you move to
  # production you can simply add the folder name here
  exc_dirs: 
    - js/tests/lib
  # Ignore these files when found. Yet another way to control i's recursive 
  # search of your project folder for dependencies. Out of the box you should
  # be ignoring i.js itself, 'bootstrap', and 'min_file_name'
  exc_files:
    -js/i.js
    -js/i.min.js
    -js/bootstrap.js
    -js/production.js
  # From where depwriter.rb is, how far up until the root of your project?
  i_root: ../
  # what is the name of the folder i.js is in?
  i_dir: js
  # are you using the minified version of i.js or the un-minified?
  # choices are 'i.js' or 'i.min.js'
  i_v: i.min.js
  # what to call the minified file created in 'production' mode
  min_file_name: production.js
  # For third party scripts that you need to add a dependency to. For example, 
  # jQuery plugins need to have 'jQuery' as a dependency. The value will be 
  # inserted as a 'require' for and dependency found in the directory
  plugin_dirs:
    js/plugins: 'jQuery'
  # Some environments will want a segment of the path for js files removed
  # before being served depending on environment. For example to remove the 
  # 'public/' path segment from a file found in 'public/scripts/foo.js' you 
  # would set this val to "public/" resulting in 'scripts/foo.js' being 
  # assigned as the path. It's this val that gets used as the 'src=' attribute
  # of script tags written by i.js for all non-cdn dependencies
  rm_dir: ''
  # The extension names of files to be searched by the depwriter for define
  # or require statements (minus the dot). This allows you to control what 
  # types of files will be indexed as dependencies by filetype.
  # Any file with an extension not in this list will be ignored, 
  # so if your site uses '.erb' templates for example don't forget to add 'erb'
  search_ext: 
    - js
    - html
  # Directory paths (relative to root) where third party javascript files are 
  # that you want added to the minified file. Since these files will not have any 
  # 'define' or 'require' statements they normally wouldn't be detected. Also
  # these files are expected to be minified already (Our minifier wont touch them)
  ven_dirs:
    - js/vendor

# A module, mixed in to the Dependant class, that allows it to minify itself.
# I am using the Closure REST service but you can write you own demaximizer
# and set its config info here. Depwriter simply looks to see if the 'demaximize'
# flag has been set to true and calls the minify() method. Each instance of the
# Dependant class keeps the raw js from your original script in the 
# 'txt' instance variable so that is what you'll be minifying
demaximizer:
  url: 'http://closure-compiler.appspot.com/compile' 
  comp_level: SIMPLE_OPTIMIZATIONS
  output_format: text
  output_info: compiled_code
  